DROP DATABASE conerivedev;
CREATE DATABASE conerivedev;
USE conerivedev;

-- CREATE COMMANDS

CREATE TABLE USERS (
	User_id VARCHAR(100) PRIMARY KEY,
	Name VARCHAR(100) NOT NULL,
	Phone VARCHAR(100) NOT NULL,
	UNIQUE(Phone)
);

CREATE TABLE USER_DISPLAY_PICTURES (
	User_id VARCHAR(100) PRIMARY KEY,
	FOREIGN KEY(User_id) REFERENCES USERS(User_id) ON DELETE CASCADE,
	Image_url VARCHAR(8000) NOT NULL
);

CREATE TABLE EMAILS (
	User_id VARCHAR(100) PRIMARY KEY,
	Email_id VARCHAR(100) NOT NULL,
	FOREIGN KEY(User_id) REFERENCES USERS(User_id) ON DELETE CASCADE,
	UNIQUE(Email_id) 	
);

CREATE TABLE USER_REGISTRATION_TOKEN (
	User_id VARCHAR(100) PRIMARY KEY,
	Token VARCHAR(8000) NOT NULL,
	FOREIGN KEY(User_id) REFERENCES USERS(User_id) ON DELETE CASCADE
);

CREATE TABLE GROUPS (
	Group_id INT AUTO_INCREMENT PRIMARY KEY,
	Group_name VARCHAR(100) NOT NULL,
	Group_description VARCHAR(500) NOT NULL,
	Admin_id VARCHAR(100) NOT NULL,
	FOREIGN KEY(Admin_ID) REFERENCES USERS(User_id) ON DELETE CASCADE,
	UNIQUE(Group_id, Admin_ID)
);

CREATE TABLE GROUP_DISPLAY_PICTURES (
	Group_id INT PRIMARY KEY,
	Image_url VARCHAR(8000) NOT NULL,
	FOREIGN KEY(Group_id) REFERENCES GROUPS(Group_id) ON DELETE CASCADE
);

CREATE TABLE GROUP_MEMBERS ( 
	Group_id INT NOT NULL,
	User_id VARCHAR(100) NOT NULL,
	FOREIGN KEY(Group_id) REFERENCES GROUPS(Group_id) ON DELETE CASCADE,
	FOREIGN KEY(User_id) REFERENCES USERS(User_id) ON DELETE CASCADE,
	PRIMARY KEY(Group_id, User_id)
);

CREATE TABLE GROUP_INVITE_NOTIFICATION (
	Notification_id INT AUTO_INCREMENT PRIMARY KEY,
	Sender_id VARCHAR(100) NOT NULL,
	Receiver_id VARCHAR(100) NOT NULL,
	Group_id INT NOT NULL,
	FOREIGN KEY(Sender_id) REFERENCES USERS(User_id) ON DELETE CASCADE,
	FOREIGN KEY(Receiver_id) REFERENCES USERS(User_id) ON DELETE CASCADE,
	FOREIGN KEY(Group_id) REFERENCES GROUPS(Group_id) ON DELETE CASCADE,
	UNIQUE(Sender_id, Receiver_id, Group_id)
);

CREATE TABLE TRIPS (
	Trip_id INT AUTO_INCREMENT PRIMARY KEY,
	Trip_name VARCHAR(100) NOT NULL,
	Group_id INT NOT NULL,
	FOREIGN KEY(Group_id) REFERENCES GROUPS(Group_id) ON DELETE CASCADE,
	UNIQUE(Trip_id, Group_ID)
);

CREATE TABLE TRIP_NOTIFICATION_RADIUS (
	Trip_id INT PRIMARY KEY,
	Notification_radius DOUBLE NOT NULL,
	FOREIGN KEY(Trip_id) REFERENCES TRIPS(Trip_id) ON DELETE CASCADE
);

CREATE TABLE TRIP_START_DATE (
	Trip_id INT PRIMARY KEY,
	Start_date DATETIME NOT NULL,
	FOREIGN KEY(Trip_id) REFERENCES TRIPS(Trip_id) ON DELETE CASCADE
);

CREATE TABLE TRIP_END_DATE (
	Trip_id INT PRIMARY KEY,
	End_date DATETIME NOT NULL,
	FOREIGN KEY(Trip_id) REFERENCES TRIPS(Trip_id) ON DELETE CASCADE
);

CREATE TABLE TRIP_MEMBERS ( 
	Trip_id INT NOT NULL,
	User_id VARCHAR(100) NOT NULL,
	FOREIGN KEY(Trip_id) REFERENCES TRIPS(Trip_id) ON DELETE CASCADE,
	FOREIGN KEY(User_id) REFERENCES GROUP_MEMBERS(User_id) ON DELETE CASCADE,
	PRIMARY KEY(Trip_id, User_id)
);

CREATE TABLE VEHICLES (
	Vehicle_id INT AUTO_INCREMENT PRIMARY KEY,
	Vehicle_name VARCHAR(100) NOT NULL,
	Vehicle_type VARCHAR(100) NOT NULL,
	Driver_id VARCHAR(100) NOT NULL,
	Trip_id INT NOT NULL,
	FOREIGN KEY(Driver_id) REFERENCES TRIP_MEMBERS(User_id) ON DELETE CASCADE,
	FOREIGN KEY(Trip_id) REFERENCES TRIPS(Trip_id) ON DELETE CASCADE,
	UNIQUE(Driver_id, Trip_id)
);

CREATE TABLE VEHICLE_MEMBERS (
	Vehicle_id INT NOT NULL,
	User_id VARCHAR(100) NOT NULL,
	FOREIGN KEY(Vehicle_id) REFERENCES VEHICLES(Vehicle_id) ON DELETE CASCADE,
	FOREIGN KEY(User_id) REFERENCES TRIP_MEMBERS(User_id) ON DELETE CASCADE,
	PRIMARY KEY(Vehicle_id, User_id)
);

CREATE TABLE IMAGES (
	Image_id INT AUTO_INCREMENT PRIMARY KEY,
	Image_url VARCHAR(10000) NOT NULL,
	Image_time DATETIME NOT NULL,
	Image_lat DOUBLE NOT NULL,
	Image_lng DOUBLE NOT NULL,
	User_id VARCHAR(100) NOT NULL,
	FOREIGN KEY(User_id) REFERENCES TRIP_MEMBERS(User_id) ON DELETE CASCADE,
	Trip_id INT NOT NULL,
	FOREIGN KEY(Trip_id) REFERENCES TRIPS(Trip_id) ON DELETE CASCADE
);

-- Tables to be added
-- google drive auth
-- instagram auth
-- facebook auth

-- TRIGGERS
DELIMITER //
CREATE TRIGGER onNewGroupTrigger
AFTER INSERT ON GROUPS
FOR EACH ROW
BEGIN
 INSERT INTO GROUP_MEMBERS(Group_id, User_id)
 VALUES (NEW.Group_id, NEW.Admin_id);
END //
DELIMITER ;

-- VIEWS
CREATE VIEW GROUP_SUMMARY AS SELECT 
	Group_id, 
	Group_name, 
	Image_url AS Group_Display_picture, 
	COUNT(User_id) AS Member_count,
	Trip_count,
	Image_count
FROM GROUPS
NATURAL LEFT JOIN GROUP_DISPLAY_PICTURES
NATURAL LEFT JOIN GROUP_MEMBERS
NATURAL LEFT JOIN (
	SELECT 
	Group_id, 
	COUNT(Trip_id) AS Trip_count
	FROM GROUPS 
	NATURAL LEFT JOIN TRIPS
	GROUP BY Group_id
) g1 NATURAL LEFT JOIN (
	SELECT 
	Group_id,
	COUNT(Image_id) AS Image_count
	FROM GROUPS
	NATURAL LEFT JOIN TRIPS
	NATURAL LEFT JOIN IMAGES 
	GROUP BY Group_id
) g2 
GROUP BY Group_id;

CREATE VIEW USER_SUMMARY AS SELECT
	Group_id,
	User_id, 
	Name, 
	Phone, 
	Image_url  
FROM GROUPS
NATURAL LEFT JOIN GROUP_MEMBERS
NATURAL LEFT JOIN USERS
NATURAL LEFT JOIN USER_DISPLAY_PICTURES
ORDER BY Name;

CREATE VIEW NOTIFICATIONS AS 
SELECT n.Group_id, g.Group_name, gdp.Image_url, n.Notification_id, n.Sender_id, n.Receiver_id, s.Name as Sender_name, r.Name as Receiver_name
FROM GROUP_INVITE_NOTIFICATION n
NATURAL LEFT JOIN GROUPS g 
NATURAL LEFT JOIN group_display_pictures gdp
LEFT JOIN USERS s ON s.User_id = n.Sender_id
LEFT JOIN USERS r ON r.User_id = n.Receiver_id;